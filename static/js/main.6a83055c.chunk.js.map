{"version":3,"sources":["components/Misc.tsx","util/MalApi.ts","util/Utils.ts","util/Visualisation.ts","components/Controls.tsx","components/App.tsx","index.tsx"],"names":["Links","React","memo","links","linkComponents","i","length","url","description","isLast","push","createElement","Fragment","key","concat","href","ListType","SupportedListTypes","Anime","Manga","EntryStatus","getUrlParameter","name","replace","results","RegExp","exec","location","search","decodeURIComponent","getConfigFromUrlParameters","username","listType","cap","Math","round","Number","displayType","padNumber","x","toString","formatDate","date","getFullYear","getMonth","getDate","DisplayType","SupportedDisplayTypes","Point","Box","Range","Controls","config","defaultUsername","defaultListType","defaultCapAt1k","defaultDisplayType","includes","setUsername","useState","setListType","capAt1k","setCapAt1k","setDisplayType","className","htmlFor","type","id","required","placeholder","value","onChange","e","target","checked","App","controlsVisible","setControlsVisible","visualisationStatus","setVisualisationStatus","useEffect","getMalListEntries","uri","encodeURI","requestUrl","Promise","resolve","then","request","get","accept","response","status","body","list_entries","listEntries","dataset","entry","entryDetails","node","entryStatus","list_status","Completed","start","end","start_date","startsWith","Date","updated_at","finish_date","moment","add","toDate","toUTCString","record","content","title","sort","a","b","localeCompare","prepareVisJsDataset","dataset_subset","slice","console","log","drawVisJsTimeline","container","document","getElementById","error","items","vis","DataSet","options","height","align","zoomMax","zoomMin","timeline","Timeline","on","properties","itemId","item","itemElement","event","classList","contains","getElementsByClassName","parentElement","clientWidth","_items$get","tooltip","style","display","innerText","addEventListener","left","pageX","top","pageY","catch","message","toggleControls","useCallback","prevState","onClick","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6a83055c.chunk.js","sourcesContent":["/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\nimport React from 'react';\n\ninterface LinksProps {\n    links: [string, string][];\n}\n\nexport const Links = React.memo<LinksProps>(({links}) => {\n    const linkComponents = [];\n    for (let i = 0; i < links.length; ++i) {\n        const [url, description] = links[i];\n        const isLast = i === links.length - 1;\n        linkComponents.push(<React.Fragment key={`link-${i}`}>\n            <a href={url}>{description}</a>{isLast ? '' : ', '}\n        </React.Fragment>);\n    }\n    return <p>Links if something is broken: {linkComponents}</p>;\n});\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\nimport request from 'superagent';\nimport Promise from 'bluebird';\n\nexport enum ListType {\n    Anime = 'anime',\n    Manga = 'manga',\n}\n\nexport const SupportedListTypes = [ListType.Anime, ListType.Manga];\n\nexport enum EntryStatus {\n    Completed = 'completed',\n    PlanToWatch = 'plan_to_watch',\n    Watching = 'watching',\n}\n\nexport interface ListEntry {\n    node: {\n        id: number;\n        title: string;\n        main_picture: {\n            medium: string;\n            large: string;\n        };\n    };\n    list_status: {\n        status: string;\n        score: number;\n        num_episodes_watched: number;\n        is_rewatching: boolean;\n        updated_at: string;\n        start_date?: string;\n        finish_date?: string;\n    };\n}\n\nexport const getMalListEntries = (username: string, listType: ListType): Promise<ListEntry[]> => {\n    const lambdaBaseUrl = 'https://wkup5ts6yk.execute-api.eu-west-2.amazonaws.com';\n    const uri = encodeURI(`/v1?username=${username}&list_type=${listType}`);\n    const requestUrl = `${lambdaBaseUrl}${uri}`;\n    return Promise.resolve()\n        .then(() => request.get(requestUrl).accept('application/json'))\n        .then(response => {\n            if (response.status !== 200) {\n\n            }\n            return response.body.list_entries as ListEntry[];\n        });\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\nexport const getUrlParameter = (name: string): string => {\n    name = name.replace(/[[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n    const regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\n    // eslint-disable-next-line no-restricted-globals\n    const results = regex.exec(location.search);\n    return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n};\n\nexport const getConfigFromUrlParameters = () => {\n    return {\n        username: getUrlParameter('username'),\n        listType: getUrlParameter('list_type'),\n        cap: Math.round(Number(getUrlParameter('cap'))),\n        displayType: getUrlParameter('display_type'),\n    } as const;\n};\n\nconst padNumber = (x: number): string => {\n    return (x < 10) ? ('0' + x) : x.toString();\n};\n\nexport const formatDate = (date: Date): string => {\n    return date.getFullYear() + '-' + padNumber(date.getMonth() + 1) + '-' + padNumber(date.getDate());\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\nimport moment from 'moment';\n\nimport {formatDate} from './Utils';\nimport {EntryStatus, ListEntry} from './MalApi';\n\nexport enum DisplayType {\n    Point = 'point',\n    Box = 'box',\n    Range = 'range',\n}\n\nexport const SupportedDisplayTypes = [DisplayType.Point, DisplayType.Box, DisplayType.Range];\n\ntype VisJsRecord = { id: number; content: string; start: string; end: string }\ntype VisJsDataset = VisJsRecord[]\n\nexport const prepareVisJsDataset = (listEntries: ListEntry[]): VisJsDataset => {\n    const dataset: VisJsDataset = [];\n    for (let i = 0; i < listEntries.length; i++) {\n        const entry = listEntries[i];\n        const entryDetails = entry.node;\n        const entryStatus = entry.list_status;\n\n        if (entry.list_status.status !== EntryStatus.Completed) continue;\n\n        let start: Date | null = null;\n        let end: Date | null = null;\n\n\n        if (entryStatus.start_date && !entryStatus.start_date.startsWith('0000-00-00')) {\n            //If start date exists, use it\n            start = new Date(entryStatus.start_date);\n        } else {\n            //If start date does not exist, use updated_at\n            start = new Date(entryStatus.updated_at);\n        }\n\n        if (entryStatus.finish_date && !entryStatus.finish_date.startsWith('0000-00-00')) {\n            //If finish date exists, use it\n            end = new Date(entryStatus.finish_date);\n        } else {\n            //If finish date does not exist, use start + 1 day\n            end = moment(start).add(1, 'day').toDate();\n        }\n\n        //If end date is before start date, swap them\n        if (end < start) [start, end] = [end, start];\n\n        //If start date is the same as end date, add 1 day to end date\n        if (start.toUTCString() === end.toUTCString()) {\n            end = moment(start).add(1, 'day').toDate();\n        }\n\n        const record = {\n            id: i,\n            content: entryDetails.title,\n            start: formatDate(start),\n            end: formatDate(end),\n        };\n        dataset.push(record);\n    }\n    return dataset.sort((a, b) => b.end.localeCompare(a.end));\n};\n\nexport const drawVisJsTimeline = (dataset: VisJsDataset, displayType: DisplayType) => {\n    const container = document.getElementById('visualization');\n\n    if (!container) {\n        console.error('Container not found!');\n        return;\n    }\n\n    const items = new vis.DataSet(dataset);\n    const options = {\n        height: '100%',\n        align: 'left',\n        zoomMax: 31536000000 * 20,\n        zoomMin: 86400000 * 10,\n        type: displayType,\n    };\n\n    const timeline = new vis.Timeline(container, items, options);\n\n    if (displayType === DisplayType.Range) {\n        timeline.on('itemover', (properties: { item: number | string, event: MouseEvent }) => {\n            const itemId = properties.item;\n\n            // Get the item element\n            let itemElement = properties.event.target as HTMLElement;\n            //Sometimes the event target is not the item itself, but a parent element\n            if (!itemElement.classList.contains('vis-item-content')) {\n                itemElement = itemElement.getElementsByClassName('vis-item-content')[0] as HTMLElement;\n            }\n\n        \n            const parentElement = itemElement.parentElement;\n        \n            // Check if the content is overflowing (this means the text is too long to fit in the box)\n            if (parentElement && itemElement.clientWidth > parentElement.clientWidth) {\n                const tooltip = document.getElementById('tooltip') as HTMLDivElement;\n                tooltip.style.display = 'block';\n                tooltip.innerText = items.get(itemId)?.content || '';\n            }\n        });\n        \n        // Listen for mouseMove event to position the tooltip\n        container.addEventListener('mousemove', (event: MouseEvent) => {\n            const tooltip = document.getElementById('tooltip') as HTMLDivElement;\n            tooltip.style.left = `${event.pageX + 10}px`;\n            tooltip.style.top = `${event.pageY + 10}px`;\n        });\n        \n        // Listen for mouseOut event to hide the tooltip\n        timeline.on('itemout', () => {\n            const tooltip = document.getElementById('tooltip') as HTMLDivElement;\n            tooltip.style.display = 'none';\n        });\n    }\n\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\nimport React from 'react';\n\nimport {ListType} from '../util/MalApi';\nimport {getConfigFromUrlParameters} from '../util/Utils';\nimport {DisplayType, SupportedDisplayTypes} from '../util/Visualisation';\n\n\nexport const Controls = React.memo(() => {\n    const config = getConfigFromUrlParameters();\n    const defaultUsername = config.username;\n    const defaultListType = config.listType === ListType.Manga ? ListType.Manga : ListType.Anime;\n    const defaultCapAt1k = config.cap === 1000;\n    let defaultDisplayType = config.displayType;\n    if (!SupportedDisplayTypes.includes(defaultDisplayType as DisplayType)) {\n        defaultDisplayType = DisplayType.Box;\n    }\n\n    const [username, setUsername] = React.useState(defaultUsername);\n    const [listType, setListType] = React.useState(defaultListType);\n    const [capAt1k, setCapAt1k] = React.useState(defaultCapAt1k);\n    const [displayType, setDisplayType] = React.useState(defaultDisplayType);\n\n    return (\n        <form>\n            <div className=\"username-input\">\n                <label htmlFor=\"username\">Enter your username:</label>\n                <input type=\"text\" id=\"username\" name=\"username\" required placeholder=\"e.g. Timbo_KZ\"\n                       value={username} onChange={e => setUsername(e.target.value)}/>\n            </div>\n\n            <div className=\"radio-column-wrapper\">\n                <div className=\"radio-column\">\n                    <div className=\"column-title\">List type:</div>\n                    <input type=\"radio\" id=\"radio-anime\" name=\"list_type\" value={ListType.Anime}\n                           checked={listType === ListType.Anime} onChange={() => setListType(ListType.Anime)}/>\n                    <label htmlFor=\"radio-anime\">Anime list</label>\n                    <input type=\"radio\" id=\"radio-manga\" name=\"list_type\" value={ListType.Manga}\n                           checked={listType === ListType.Manga} onChange={() => setListType(ListType.Manga)}/>\n                    <label htmlFor=\"radio-manga\">Manga list</label>\n                    <hr/>\n                    <input type=\"checkbox\" id=\"checkbox-cap\" name=\"cap\" value=\"1000\"\n                           checked={capAt1k} onChange={e => setCapAt1k(e.target.checked)}/>\n                    <label htmlFor=\"checkbox-cap\">Cap at 1000 titles</label>\n                </div>\n            </div>\n            <div className=\"radio-column-wrapper\">\n                <div className=\"radio-column\">\n                    <div className=\"column-title\">Display type:</div>\n                    <input type=\"radio\" id=\"radio-point\" name=\"display_type\" value={DisplayType.Point}\n                           checked={displayType === DisplayType.Point}\n                           onChange={() => setDisplayType(DisplayType.Point)}/>\n                    <label htmlFor=\"radio-point\">Point</label>\n                    <input type=\"radio\" id=\"radio-box\" name=\"display_type\" value={DisplayType.Box}\n                           checked={displayType === DisplayType.Box}\n                           onChange={() => setDisplayType(DisplayType.Box)}/>\n                    <label htmlFor=\"radio-box\">Box</label>\n                    <input type=\"radio\" id=\"radio-range\" name=\"display_type\" value={DisplayType.Range}\n                           checked={displayType === DisplayType.Range}\n                           onChange={() => setDisplayType(DisplayType.Range)}/>\n                    <label htmlFor=\"radio-range\">Range (duration)</label>\n                </div>\n            </div>\n\n            <input className=\"go\" type=\"submit\" value=\"Go!\"/>\n        </form>\n    );\n});\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\nimport React, {useEffect} from 'react';\n\nimport './App.css';\nimport {Links} from './Misc';\nimport {Controls} from './Controls';\nimport {getConfigFromUrlParameters} from '../util/Utils';\nimport {ListType, SupportedListTypes, getMalListEntries} from '../util/MalApi';\nimport {DisplayType, drawVisJsTimeline, prepareVisJsDataset, SupportedDisplayTypes} from '../util/Visualisation';\n\n\nfunction App() {\n    const [controlsVisible, setControlsVisible] = React.useState(true);\n    const [visualisationStatus, setVisualisationStatus] = React.useState('Enter your MAL credentials!');\n\n    useEffect(() => {\n        let {username, listType, cap, displayType} = getConfigFromUrlParameters();\n        if (!username || !listType || !displayType) return;\n        if (!SupportedListTypes.includes(listType as ListType)) {\n            setVisualisationStatus(`Invalid list type: ${listType}. Try resubmitting.`);\n            return;\n        }\n        if (!SupportedDisplayTypes.includes(displayType as DisplayType)) {\n            setVisualisationStatus(`Invalid list type: ${listType}. Try resubmitting.`);\n            return;\n        }\n\n        setVisualisationStatus(`Loading ${username}'s ${listType} list...`);\n        getMalListEntries(username, listType as ListType)\n            .then(listEntries => {\n                const dataset = prepareVisJsDataset(listEntries);\n                const dataset_subset = cap > 0 ? dataset.slice(0, cap) : dataset;\n                console.log(`Showing ${dataset_subset.length} out of ${dataset.length} entries.`)\n\n                drawVisJsTimeline(dataset_subset, displayType as DisplayType);\n                setVisualisationStatus('');\n            })\n            .catch(error => setVisualisationStatus(`Error: ${error.message}`));\n    }, [setVisualisationStatus]);\n\n    const toggleControls = React.useCallback(() => setControlsVisible(prevState => !prevState), []);\n    return (\n        <div className=\"App\">\n            <div className=\"controls\">\n                <button onClick={toggleControls} className=\"controls-toggle\">Controls <span>(toggle)</span></button>\n                {controlsVisible &&\n                <div className=\"controls-body\">\n                    <p>Welcome to <strong>MyAnimeTimeline</strong>! This tool lets you visualise your MAL anime and\n                        manga progress throughout the years.</p>\n                    <Links links={[\n                        ['https://foxypanda.me/my-anime-timeline-and-kuristina/', 'Article'],\n                        ['https://github.com/TimboKZ/MyAnimeTimeline', 'GitHub'],\n                        ['https://discord.gg/HT4ttdQ', 'Discord'],\n                    ]}/>\n                    <Controls/>\n                </div>\n                }\n            </div>\n\n            <div id=\"visualization\">\n                {visualisationStatus !== '' && <div className=\"vis-status\">{visualisationStatus}</div>}\n            </div>\n            <div id=\"tooltip\" className=\"custom-tooltip\"></div>\n        </div>\n    );\n}\n\nexport default App;\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}